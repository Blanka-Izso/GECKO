function [kcatList, model] = readDLKcatOutput(model,outFile,DLKcatIDs)
% readDLKcatOutput
%   Reads the DLKcat output file and constructs a kcatList structure, that
%   can be used by selectKcatValue() to populate the ec-model with kcat
%   values. The function requires the outRxnId structure that was generated
%   by writeDLKcatInput. If model is specified as output, it will be
%   populated with metabolite SMILES derived from DLKcat.
%
% Input:
%   model       an ec-model in RAVEN format
%   outFile     name and path of the DLKcat output file
%   DLKcatIDs   vector with reaction identifiers that match the predicted
%               kcat values, which was generated by writeDLKcatInput
%
% Output:
%   kcatList    structure array with list of DLKcat derived kcat values,
%               with separate entries for each kcat value
%               source      'DLKcat'           
%               rxns        reaction identifiers, matching model.rxns
%               genes       gene identifiers, matching model.genes
%               substrate   substrates, matching model.mets
%               kcat        predicted kcat value in /sec
%   model       ec-model where model.metSmiles is updated if new SMILES
%               were found by DLKcat
%

fID          = fopen(outFile);
DLKcatOutput = textscan(fID,'%s %s %s %s\n','Delimiter','\t','HeaderLines',1);
fclose(fID);

% Check that DLKcat output file and DLKcatIDs structure match by length and
% metabolite names (not fool proof, but good enough)
mets = DLKcatOutput{1};
if ~isequal(mets,DLKcatIDs.substrates)
    error('The DLKcat output file and DLKcatIDs structure do not match')
end
% Check that all substrates are in the model
if ~all(ismember(mets,model.metNames))
    error('Not all substrates from DLKcat output can be found in the model')
end
% Check DLKcatIDs.rxns to model.ec.rxns (not fool proof, but good enough)
if ~all(ismember(DLKcatIDs.rxns,model.ec.rxns))
    error('Not all reactions in DLKcatIDs are found in model.ec.rxns')
end

% Filter out entries with no kcat value
kcats                = DLKcatOutput{4};
noOutput             = strcmp(kcats,'None');
kcats                = str2double(kcats(~noOutput));
DLKcatIDs.rxns       = DLKcatIDs.rxns(~noOutput);
DLKcatIDs.genes      = DLKcatIDs.genes(~noOutput);
DLKcatIDs.substrates = DLKcatIDs.substrates(~noOutput);

% Make kcatList structure
kcatList.source     = 'DLKcat';
kcatList.rxns       = DLKcatIDs.rxns;
kcatList.genes      = DLKcatIDs.genes;
kcatList.substrates = DLKcatIDs.substrates;
kcatList.kcats      = kcats;

% Update model.metSmiles
if nargout > 1
    [mets, metIdx]      = unique(mets,'stable');
    smiles              = DLKcatOutput{2}(metIdx);
    ignoreNone          = strcmp(smiles,'None');
    smiles(ignoreNone)  = [];
    mets(ignoreNone)    = [];
    [newSmiles,metInModel] = ismember(model.metNames,mets);
    if ~isfield(model,'metSmiles')
        model.metSmiles=cell(numel(model.mets),1);
        model.metSmiles(:)={''};
    end
    model.metSmiles(newSmiles) = smiles(metInModel(newSmiles));
end
